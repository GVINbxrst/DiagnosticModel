[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "diagmod"
version = "1.0.0"
description = "Токовая диагностика асинхронных двигателей"
authors = [{name = "DiagMod Team", email = "team@diagmod.com"}]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
keywords = ["motor", "diagnostics", "anomaly-detection", "ml", "signal-processing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "streamlit>=1.28.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",

    # Database
    "sqlalchemy[asyncio]>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.9",

    # Queue & Cache
    "celery[redis]>=5.3.4",
    "redis>=5.0.1",

    # ML & Data Science
    "numpy>=1.24.3",
    "scipy>=1.11.4",
    "pandas>=2.1.3",
    "scikit-learn>=1.3.2",
    "xgboost>=2.0.2",
    "statsmodels>=0.14.0",
    "prophet>=1.1.5",

    # Signal Processing
    "librosa>=0.10.1",
    "pywavelets>=1.4.1",

    # Monitoring & Logging
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",

    # Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",

    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
    "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
diagmod-api = "src.api.main:run"
diagmod-worker = "src.worker.celery_app:run"
diagmod-dashboard = "src.dashboard.main:run"

[project.urls]
Homepage = "https://github.com/diagmod/diagmod"
Documentation = "https://diagmod.readthedocs.io"
Repository = "https://github.com/diagmod/diagmod.git"
Issues = "https://github.com/diagmod/diagmod/issues"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
