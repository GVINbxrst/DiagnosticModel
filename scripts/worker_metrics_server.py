#!/usr/bin/env python3
"""
HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Prometheus –º–µ—Ç—Ä–∏–∫ Worker
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ HTTP
"""
import os
import sys
import time
import signal
import logging
from pathlib import Path
from prometheus_client import start_http_server, generate_latest, CONTENT_TYPE_LATEST
from flask import Flask, Response

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.utils.logger import setup_logging, get_logger
from src.utils.metrics import get_all_metrics
from src.config.settings import get_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = get_logger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
settings = get_settings()
METRICS_PORT = int(os.getenv('WORKER_METRICS_PORT', 8002))
METRICS_HOST = os.getenv('WORKER_METRICS_HOST', '0.0.0.0')

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç—Ä–∏–∫
app = Flask(__name__)


@app.route('/metrics')
def metrics():
    """Endpoint –¥–ª—è Prometheus –º–µ—Ç—Ä–∏–∫"""
    try:
        metrics_data = get_all_metrics()
        return Response(metrics_data, mimetype=CONTENT_TYPE_LATEST)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        return Response("Error getting metrics", status=500)


@app.route('/health')
def health():
    """Health check –¥–ª—è Worker"""
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "service": "diagmod-worker-metrics",
        "version": "1.0.0"
    }


@app.route('/ready')
def ready():
    """Readiness probe –¥–ª—è Kubernetes"""
    return {
        "status": "ready",
        "timestamp": time.time()
    }


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫ Worker –Ω–∞ {METRICS_HOST}:{METRICS_PORT}")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        app.run(
            host=METRICS_HOST,
            port=METRICS_PORT,
            debug=False,
            threaded=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
