# DiagMod System Status Check - PowerShell Script
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

param(
    [switch]$Detailed,
    [switch]$Json,
    [switch]$Help
)

if ($Help) {
    Write-Host "DiagMod System Status Checker" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    Write-Host "  -Detailed    –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    Write-Host "  -Json        –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
    Write-Host "  -Help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    Write-Host ""
    Write-Host "–ü—Ä–∏–º–µ—Ä—ã:"
    Write-Host "  .\status.ps1                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    Write-Host "  .\status.ps1 -Detailed      # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    Write-Host "  .\status.ps1 -Json          # JSON –≤—ã–≤–æ–¥"
    exit 0
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function Test-ServiceHealth {
    param($Url, $ServiceName, $TimeoutSeconds = 5)

    try {
        $response = Invoke-WebRequest -Uri $Url -TimeoutSec $TimeoutSeconds -UseBasicParsing
        return @{
            Name = $ServiceName
            Status = "Healthy"
            StatusCode = $response.StatusCode
            ResponseTime = $response.Headers.'Response-Time'
        }
    }
    catch {
        return @{
            Name = $ServiceName
            Status = "Unhealthy"
            Error = $_.Exception.Message
        }
    }
}

function Test-DockerService {
    param($ServiceName)

    try {
        $output = docker-compose ps $ServiceName 2>$null
        if ($LASTEXITCODE -eq 0 -and $output -match "Up") {
            return @{
                Name = $ServiceName
                Status = "Running"
                Container = "Up"
            }
        } else {
            return @{
                Name = $ServiceName
                Status = "Stopped"
                Container = "Down"
            }
        }
    }
    catch {
        return @{
            Name = $ServiceName
            Status = "Unknown"
            Error = "Docker not available"
        }
    }
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function Get-SystemStatus {
    $status = @{
        Timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
        OverallStatus = "Unknown"
        Services = @{}
        Docker = @{}
        System = @{}
    }

    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ DiagMod —Å–∏—Å—Ç–µ–º—ã..." -ForegroundColor Cyan
    Write-Host ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
    Write-Host "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Yellow

    $webServices = @(
        @{ Url = "http://localhost:8000/health"; Name = "API Server" },
        @{ Url = "http://localhost:8501"; Name = "Dashboard" },
        @{ Url = "http://localhost:9090"; Name = "Prometheus" },
        @{ Url = "http://localhost:8000/metrics"; Name = "API Metrics" },
        @{ Url = "http://localhost:8002/health"; Name = "Worker Metrics" }
    )

    foreach ($service in $webServices) {
        $result = Test-ServiceHealth -Url $service.Url -ServiceName $service.Name
        $status.Services[$service.Name] = $result

        if ($result.Status -eq "Healthy") {
            Write-Host "  ‚úÖ $($service.Name)" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå $($service.Name) - $($result.Error)" -ForegroundColor Red
        }
    }

    Write-Host ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    Write-Host "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." -ForegroundColor Yellow

    $dockerServices = @("postgres", "redis", "api", "worker", "dashboard", "prometheus")

    foreach ($service in $dockerServices) {
        $result = Test-DockerService -ServiceName $service
        $status.Docker[$service] = $result

        if ($result.Status -eq "Running") {
            Write-Host "  ‚úÖ $service" -ForegroundColor Green
        } elseif ($result.Status -eq "Stopped") {
            Write-Host "  ‚èπÔ∏è $service (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)" -ForegroundColor Yellow
        } else {
            Write-Host "  ‚ùì $service (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)" -ForegroundColor Gray
        }
    }

    Write-Host ""

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if ($Detailed) {
        Write-Host "üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..." -ForegroundColor Yellow

        # –ü—Ä–æ—Ü–µ—Å—Å—ã Python
        $pythonProcesses = Get-Process python* -ErrorAction SilentlyContinue
        $status.System.PythonProcesses = $pythonProcesses.Count

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
        $usedPorts = @()
        $checkPorts = @(8000, 8501, 8502, 9090, 5432, 6379)

        foreach ($port in $checkPorts) {
            $connection = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
            if ($connection) {
                $usedPorts += $port
            }
        }
        $status.System.UsedPorts = $usedPorts

        Write-Host "  üìä Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $($pythonProcesses.Count)" -ForegroundColor Cyan
        Write-Host "  üîå –ó–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: $($usedPorts -join ', ')" -ForegroundColor Cyan

        # –°—Ç–∞—Ç—É—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if ($env:VIRTUAL_ENV) {
            Write-Host "  üêç –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω–æ ($env:VIRTUAL_ENV)" -ForegroundColor Green
            $status.System.VirtualEnv = "Active"
        } else {
            Write-Host "  üêç –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ" -ForegroundColor Yellow
            $status.System.VirtualEnv = "Inactive"
        }

        Write-Host ""
    }

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    $healthyServices = ($status.Services.Values | Where-Object { $_.Status -eq "Healthy" }).Count
    $totalServices = $status.Services.Count
    $runningContainers = ($status.Docker.Values | Where-Object { $_.Status -eq "Running" }).Count

    if ($healthyServices -eq $totalServices -and $runningContainers -gt 0) {
        $status.OverallStatus = "Healthy"
        Write-Host "üü¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" -ForegroundColor Green
    } elseif ($healthyServices -gt 0 -or $runningContainers -gt 0) {
        $status.OverallStatus = "Degraded"
        Write-Host "üü° –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ" -ForegroundColor Yellow
    } else {
        $status.OverallStatus = "Unhealthy"
        Write-Host "üî¥ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Red
    }

    Write-Host ""
    Write-Host "üìà –°–≤–æ–¥–∫–∞:" -ForegroundColor Cyan
    Write-Host "  –í–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: $healthyServices/$totalServices" -ForegroundColor White
    Write-Host "  Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: $runningContainers/$($dockerServices.Count)" -ForegroundColor White

    return $status
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
$systemStatus = Get-SystemStatus

# –í—ã–≤–æ–¥ –≤ JSON –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
if ($Json) {
    $systemStatus | ConvertTo-Json -Depth 3
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
if ($systemStatus.OverallStatus -ne "Healthy") {
    Write-Host ""
    Write-Host "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:" -ForegroundColor Yellow
    Write-Host ""

    $healthyServices = ($systemStatus.Services.Values | Where-Object { $_.Status -eq "Healthy" }).Count
    $runningContainers = ($systemStatus.Docker.Values | Where-Object { $_.Status -eq "Running" }).Count

    if ($runningContainers -eq 0) {
        Write-Host "  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker —Å–µ—Ä–≤–∏—Å—ã:" -ForegroundColor White
        Write-Host "     docker-compose up -d" -ForegroundColor Gray
        Write-Host ""
    }

    if ($healthyServices -eq 0) {
        Write-Host "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:" -ForegroundColor White
        Write-Host "     docker-compose logs api" -ForegroundColor Gray
        Write-Host "     docker-compose logs worker" -ForegroundColor Gray
        Write-Host ""

        Write-Host "  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:" -ForegroundColor White
        Write-Host "     docker-compose restart api worker" -ForegroundColor Gray
        Write-Host ""
    }

    if (-not $env:VIRTUAL_ENV) {
        Write-Host "  4. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:" -ForegroundColor White
        Write-Host "     venv\Scripts\Activate.ps1" -ForegroundColor Gray
        Write-Host ""
    }

    Write-Host "  5. –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç):" -ForegroundColor White
    Write-Host "     .\scripts\setup.ps1 -Dev" -ForegroundColor Gray
}

Write-Host ""
Write-Host "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .\status.ps1 -Help" -ForegroundColor Blue
