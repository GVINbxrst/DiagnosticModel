#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è RMS —Ç—Ä–µ–Ω–¥–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ —Ç–æ–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/forecast_rms.py --equipment-id UUID --steps 24 --phases a,b,c
    python scripts/forecast_rms.py --all-equipment --steps 12
    python scripts/forecast_rms.py --equipment-id UUID --output forecast_results.json
"""

import argparse
import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Optional
from uuid import UUID

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from src.ml.forecasting import (
    forecast_rms_trends,
    get_anomaly_probability,
    RMSTrendForecaster,
    DEFAULT_FORECAST_STEPS
)
from src.database.connection import get_async_session
from src.database.models import Equipment
from src.utils.logger import get_logger
from sqlalchemy import select

logger = get_logger(__name__)


async def get_all_equipment_ids() -> List[UUID]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    async with get_async_session() as session:
        query = select(Equipment.id).where(Equipment.is_active == True)
        result = await session.execute(query)
        return [row[0] for row in result.fetchall()]


async def forecast_single_equipment(
    equipment_id: UUID,
    forecast_steps: int,
    phases: List[str],
    output_file: Optional[str] = None
) -> dict:
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è {equipment_id}")

    try:
        results = await forecast_rms_trends(
            equipment_id=equipment_id,
            forecast_steps=forecast_steps,
            phases=phases
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False, default=str)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")

        return results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {equipment_id}: {e}")
        return {'error': str(e), 'equipment_id': str(equipment_id)}


async def forecast_all_equipment(
    forecast_steps: int,
    phases: List[str],
    output_dir: str = "data/forecasts"
) -> dict:
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Path(output_dir).mkdir(parents=True, exist_ok=True)

    equipment_ids = await get_all_equipment_ids()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(equipment_ids)} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    all_results = {
        'timestamp': datetime.utcnow().isoformat(),
        'total_equipment': len(equipment_ids),
        'forecast_steps': forecast_steps,
        'phases': phases,
        'results': {},
        'summary': {
            'successful': 0,
            'failed': 0,
            'high_risk': 0,
            'medium_risk': 0,
            'low_risk': 0
        }
    }

    for equipment_id in equipment_ids:
        try:
            results = await forecast_single_equipment(
                equipment_id=equipment_id,
                forecast_steps=forecast_steps,
                phases=phases
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            individual_file = Path(output_dir) / f"forecast_{equipment_id}.json"
            with open(individual_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False, default=str)

            if 'error' in results:
                all_results['summary']['failed'] += 1
            else:
                all_results['summary']['successful'] += 1

                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–∞
                max_prob = results.get('summary', {}).get('max_anomaly_probability', 0)
                if max_prob >= 0.6:
                    all_results['summary']['high_risk'] += 1
                elif max_prob >= 0.3:
                    all_results['summary']['medium_risk'] += 1
                else:
                    all_results['summary']['low_risk'] += 1

            all_results['results'][str(equipment_id)] = {
                'status': 'success' if 'error' not in results else 'failed',
                'max_anomaly_probability': results.get('summary', {}).get('max_anomaly_probability'),
                'recommendation': results.get('summary', {}).get('recommendation'),
                'file': str(individual_file)
            }

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {equipment_id}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {equipment_id}: {e}")
            all_results['summary']['failed'] += 1
            all_results['results'][str(equipment_id)] = {
                'status': 'critical_error',
                'error': str(e)
            }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    summary_file = Path(output_dir) / f"forecast_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(summary_file, 'w', encoding='utf-8') as f:
        json.dump(all_results, f, indent=2, ensure_ascii=False, default=str)

    logger.info(f"–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {summary_file}")

    return all_results


async def quick_anomaly_check(equipment_id: UUID, time_windows: int = 24) -> float:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–æ–º–∞–ª–∏–∏"""
    logger.info(f"–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è {equipment_id}")

    try:
        probability = await get_anomaly_probability(equipment_id, time_windows)

        status = "–ù–û–†–ú–ê–õ–¨–ù–û"
        if probability >= 0.8:
            status = "–ö–†–ò–¢–ò–ß–ù–û"
        elif probability >= 0.6:
            status = "–í–´–°–û–ö–ò–ô –†–ò–°–ö"
        elif probability >= 0.3:
            status = "–°–†–ï–î–ù–ò–ô –†–ò–°–ö"
        elif probability >= 0.1:
            status = "–ù–ò–ó–ö–ò–ô –†–ò–°–ö"

        print(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {equipment_id}:")
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏: {probability:.3f}")
        print(f"  –°—Ç–∞—Ç—É—Å: {status}")

        return probability

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return 0.0


def print_results_summary(results: dict):
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if 'error' in results:
        print(f"‚ùå –û—à–∏–±–∫–∞: {results['error']}")
        return

    summary = results.get('summary', {})
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)

    print(f"üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {results.get('equipment_id', 'N/A')}")
    print(f"üìÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {results.get('timestamp', 'N/A')}")
    print(f"üìà –®–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞: {results.get('forecast_steps', 'N/A')}")

    if summary:
        print(f"\nüéØ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –ê–ù–û–ú–ê–õ–ò–ò: {summary.get('max_anomaly_probability', 0):.3f}")
        print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {summary.get('recommendation', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ñ–∞–∑: {summary.get('successful_phases', 0)}")
        print(f"‚ö†Ô∏è  –®–∞–≥–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {summary.get('high_risk_steps', 0)}")

    # –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∞–∑–∞–º
    phases = results.get('phases', {})
    if phases:
        print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –§–ê–ó–ê–ú:")
        for phase, phase_data in phases.items():
            if 'error' in phase_data:
                print(f"  ‚ùå –§–∞–∑–∞ {phase.upper()}: {phase_data['error']}")
            else:
                stats = phase_data.get('statistics', {})
                print(f"  ‚úÖ –§–∞–∑–∞ {phase.upper()}:")
                print(f"     –ù–∞–±–ª—é–¥–µ–Ω–∏–π: {phase_data.get('n_observations', 0)}")
                print(f"     RMS —Å—Ä–µ–¥–Ω–µ–µ: {stats.get('mean', 0):.4f}")
                print(f"     RMS —Å—Ç–¥. –æ—Ç–∫–ª.: {stats.get('std', 0):.4f}")

    print("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ RMS —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/forecast_rms.py --equipment-id "123e4567-e89b-12d3-a456-426614174000" --steps 24
  python scripts/forecast_rms.py --all-equipment --steps 12 --output-dir data/forecasts
  python scripts/forecast_rms.py --quick-check "123e4567-e89b-12d3-a456-426614174000"
  python scripts/forecast_rms.py --equipment-id "123e4567-e89b-12d3-a456-426614174000" --phases a,b --output results.json
        """
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        '--equipment-id',
        type=str,
        help='UUID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
    )

    parser.add_argument(
        '--all-equipment',
        action='store_true',
        help='–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
    )

    parser.add_argument(
        '--quick-check',
        type=str,
        help='–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    parser.add_argument(
        '--steps',
        type=int,
        default=DEFAULT_FORECAST_STEPS,
        help=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_FORECAST_STEPS})'
    )

    parser.add_argument(
        '--phases',
        type=str,
        default='a,b,c',
        help='–§–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: a,b,c)'
    )

    parser.add_argument(
        '--time-windows',
        type=int,
        default=24,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)'
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞
    parser.add_argument(
        '--output',
        type=str,
        help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (JSON)'
    )

    parser.add_argument(
        '--output-dir',
        type=str,
        default='data/forecasts',
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è'
    )

    parser.add_argument(
        '--quiet',
        action='store_true',
        help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)'
    )

    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.quiet:
        logger.setLevel('ERROR')
    elif args.verbose:
        logger.setLevel('DEBUG')

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–∑
    phases = [phase.strip() for phase in args.phases.split(',') if phase.strip()]

    try:
        if args.quick_check:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            equipment_id = UUID(args.quick_check)
            await quick_anomaly_check(equipment_id, args.time_windows)

        elif args.all_equipment:
            # –ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            results = await forecast_all_equipment(
                forecast_steps=args.steps,
                phases=phases,
                output_dir=args.output_dir
            )

            print(f"\n‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ: {results['summary']['successful']}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {results['summary']['failed']}")
            print(f"üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {results['summary']['high_risk']}")
            print(f"üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {results['summary']['medium_risk']}")
            print(f"üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {results['summary']['low_risk']}")

        elif args.equipment_id:
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            equipment_id = UUID(args.equipment_id)
            results = await forecast_single_equipment(
                equipment_id=equipment_id,
                forecast_steps=args.steps,
                phases=phases,
                output_file=args.output
            )

            if not args.quiet:
                print_results_summary(results)

        else:
            parser.print_help()
            return

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
