#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Celery Worker

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å Celery worker –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:
- –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ worker
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
- –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import argparse
import asyncio
import json
import sys
import time
from pathlib import Path
from typing import Dict, List, Optional
from uuid import UUID

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from celery import Celery
from celery.result import AsyncResult
from src.worker.config import celery_app, get_worker_info
from src.worker.tasks import (
    process_raw, detect_anomalies, forecast_trend,
    cleanup_old_data, retrain_models
)
from src.worker.specialized_tasks import (
    batch_process_directory, process_equipment_workflow,
    health_check_system, daily_equipment_report
)
from src.utils.logger import get_logger

logger = get_logger(__name__)


def start_worker(
    queues: List[str] = None,
    concurrency: int = 4,
    loglevel: str = 'info',
    max_tasks_per_child: int = 1000
):
    """
    –ó–∞–ø—É—Å–∫ Celery worker

    Args:
        queues: –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        concurrency: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        loglevel: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        max_tasks_per_child: –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
    """
    if queues is None:
        queues = ['processing', 'ml', 'batch', 'maintenance', 'monitoring']

    print(f"üöÄ –ó–∞–ø—É—Å–∫ Celery Worker...")
    print(f"üìã –û—á–µ—Ä–µ–¥–∏: {', '.join(queues)}")
    print(f"‚ö° Concurrency: {concurrency}")
    print(f"üìù Log level: {loglevel}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º worker
    celery_app.worker_main([
        'worker',
        f'--queues={",".join(queues)}',
        f'--concurrency={concurrency}',
        f'--loglevel={loglevel}',
        f'--max-tasks-per-child={max_tasks_per_child}',
        '--without-gossip',
        '--without-mingle',
        '--without-heartbeat'
    ])


def start_beat(loglevel: str = 'info'):
    """
    –ó–∞–ø—É—Å–∫ Celery Beat scheduler

    Args:
        loglevel: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print(f"‚è∞ –ó–∞–ø—É—Å–∫ Celery Beat scheduler...")
    print(f"üìù Log level: {loglevel}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º beat
    celery_app.start([
        'beat',
        f'--loglevel={loglevel}',
        '--pidfile=',
        '--schedule=/tmp/celerybeat-schedule'
    ])


def get_worker_status() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ worker"""

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ worker'—ã
        inspect = celery_app.control.inspect()

        active_nodes = inspect.active()
        if not active_nodes:
            return {
                'status': 'offline',
                'workers': 0,
                'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
            }

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = inspect.stats()
        active_tasks = inspect.active()
        scheduled_tasks = inspect.scheduled()

        worker_count = len(active_nodes.keys())
        total_active_tasks = sum(len(tasks) for tasks in active_tasks.values()) if active_tasks else 0
        total_scheduled_tasks = sum(len(tasks) for tasks in scheduled_tasks.values()) if scheduled_tasks else 0

        return {
            'status': 'online',
            'workers': worker_count,
            'active_tasks': total_active_tasks,
            'scheduled_tasks': total_scheduled_tasks,
            'worker_nodes': list(active_nodes.keys()),
            'statistics': stats
        }

    except Exception as e:
        return {
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}'
        }


def submit_task(task_name: str, args: List = None, kwargs: Dict = None) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    Args:
        task_name: –ò–º—è –∑–∞–¥–∞—á–∏
        args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    Returns:
        ID –∑–∞–¥–∞—á–∏
    """
    if args is None:
        args = []
    if kwargs is None:
        kwargs = {}

    # –ú–∞–ø–∏–Ω–≥ –∑–∞–¥–∞—á
    task_map = {
        'process_raw': process_raw,
        'detect_anomalies': detect_anomalies,
        'forecast_trend': forecast_trend,
        'cleanup_old_data': cleanup_old_data,
        'retrain_models': retrain_models,
        'batch_process_directory': batch_process_directory,
        'process_equipment_workflow': process_equipment_workflow,
        'health_check_system': health_check_system,
        'daily_equipment_report': daily_equipment_report
    }

    if task_name not in task_map:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_name}")

    task = task_map[task_name]
    result = task.delay(*args, **kwargs)

    print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å ID: {result.id}")
    return result.id


def get_task_status(task_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏

    Args:
        task_id: ID –∑–∞–¥–∞—á–∏

    Returns:
        –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    """
    result = AsyncResult(task_id, app=celery_app)

    return {
        'task_id': task_id,
        'status': result.status,
        'result': result.result,
        'traceback': result.traceback,
        'successful': result.successful(),
        'failed': result.failed()
    }


def list_tasks(limit: int = 10) -> List[Dict]:
    """
    –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á

    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á

    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    """
    inspect = celery_app.control.inspect()

    try:
        active_tasks = inspect.active()
        scheduled_tasks = inspect.scheduled()

        all_tasks = []

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if active_tasks:
            for worker, tasks in active_tasks.items():
                for task in tasks:
                    all_tasks.append({
                        'id': task['id'],
                        'name': task['name'],
                        'worker': worker,
                        'status': 'active',
                        'args': task.get('args', []),
                        'kwargs': task.get('kwargs', {})
                    })

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if scheduled_tasks:
            for worker, tasks in scheduled_tasks.items():
                for task in tasks:
                    all_tasks.append({
                        'id': task['request']['id'],
                        'name': task['request']['task'],
                        'worker': worker,
                        'status': 'scheduled',
                        'eta': task.get('eta'),
                        'args': task['request'].get('args', []),
                        'kwargs': task['request'].get('kwargs', {})
                    })

        return all_tasks[:limit]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return []


def purge_tasks(queue_name: str = None):
    """
    –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á

    Args:
        queue_name: –ò–º—è –æ—á–µ—Ä–µ–¥–∏ (None –¥–ª—è –≤—Å–µ—Ö)
    """
    if queue_name:
        result = celery_app.control.purge()
        print(f"üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ {queue_name}: {result}")
    else:
        result = celery_app.control.purge()
        print(f"üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π: {result}")


def show_system_health():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""

    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏
    result = health_check_system.delay()

    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ {result.id}...")

    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
    try:
        health_data = result.get(timeout=30)

        print("\n" + "="*60)
        print("üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("="*60)

        stats = health_data.get('statistics', {})

        # –°—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        raw_signals = stats.get('raw_signals', {})
        print(f"üì° –°—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {raw_signals.get('total', 0)}")
        for status, count in raw_signals.get('by_status', {}).items():
            print(f"   {status}: {count}")

        # –ü—Ä–∏–∑–Ω–∞–∫–∏
        features = stats.get('features', {})
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {features.get('total', 0)}")

        # –ü—Ä–æ–≥–Ω–æ–∑—ã –∑–∞ 24 —á–∞—Å–∞
        predictions = stats.get('predictions_24h', {})
        print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑—ã (24—á): {predictions.get('total', 0)}")
        print(f"üö® –ê–Ω–æ–º–∞–ª–∏–∏ (24—á): {predictions.get('anomalies', 0)}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∞–Ω–æ–º–∞–ª–∏–π: {predictions.get('anomaly_rate', 0)*100:.1f}%")

        # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        equipment = stats.get('equipment', {})
        print(f"‚öôÔ∏è  –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment.get('active', 0)}")
        print(f"‚ö†Ô∏è  –° –∞–Ω–æ–º–∞–ª–∏—è–º–∏: {equipment.get('with_recent_anomalies', 0)}")

        # –ê–ª–µ—Ä—Ç—ã
        alerts = health_data.get('alerts', [])
        if alerts:
            print(f"\nüö® –ê–õ–ï–†–¢–´ ({len(alerts)}):")
            for alert in alerts:
                level_emoji = {'warning': 'üü°', 'critical': 'üî¥'}.get(alert['level'], 'üîµ')
                print(f"   {level_emoji} {alert['message']}")
        else:
            print(f"\n‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")

        print("="*60)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""

    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Celery Worker –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/worker_cli.py worker --queues processing,ml --concurrency 4
  python scripts/worker_cli.py beat
  python scripts/worker_cli.py status
  python scripts/worker_cli.py submit process_raw --args '["signal-uuid"]'
  python scripts/worker_cli.py submit forecast_trend --args '["equipment-uuid"]'
  python scripts/worker_cli.py health
  python scripts/worker_cli.py tasks --limit 20
        """
    )

    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    # Worker –∫–æ–º–∞–Ω–¥–∞
    worker_parser = subparsers.add_parser('worker', help='–ó–∞–ø—É—Å–∫ worker –ø—Ä–æ—Ü–µ—Å—Å–∞')
    worker_parser.add_argument(
        '--queues',
        default='processing,ml,batch,maintenance,monitoring',
        help='–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )
    worker_parser.add_argument(
        '--concurrency',
        type=int,
        default=4,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
    )
    worker_parser.add_argument(
        '--loglevel',
        default='info',
        choices=['debug', 'info', 'warning', 'error'],
        help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    worker_parser.add_argument(
        '--max-tasks-per-child',
        type=int,
        default=1000,
        help='–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å'
    )

    # Beat –∫–æ–º–∞–Ω–¥–∞
    beat_parser = subparsers.add_parser('beat', help='–ó–∞–ø—É—Å–∫ beat scheduler')
    beat_parser.add_argument(
        '--loglevel',
        default='info',
        choices=['debug', 'info', 'warning', 'error'],
        help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
    )

    # Status –∫–æ–º–∞–Ω–¥–∞
    subparsers.add_parser('status', help='–°—Ç–∞—Ç—É—Å worker')

    # Submit –∫–æ–º–∞–Ω–¥–∞
    submit_parser = subparsers.add_parser('submit', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    submit_parser.add_argument('task_name', help='–ò–º—è –∑–∞–¥–∞—á–∏')
    submit_parser.add_argument('--args', help='–ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    submit_parser.add_argument('--kwargs', help='–ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')

    # Task status –∫–æ–º–∞–Ω–¥–∞
    task_status_parser = subparsers.add_parser('task-status', help='–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏')
    task_status_parser.add_argument('task_id', help='ID –∑–∞–¥–∞—á–∏')

    # Tasks —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–∞
    tasks_parser = subparsers.add_parser('tasks', help='–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks_parser.add_argument('--limit', type=int, default=10, help='–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á')

    # Purge –∫–æ–º–∞–Ω–¥–∞
    purge_parser = subparsers.add_parser('purge', help='–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏')
    purge_parser.add_argument('--queue', help='–ò–º—è –æ—á–µ—Ä–µ–¥–∏ (–≤—Å–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)')

    # Health –∫–æ–º–∞–Ω–¥–∞
    subparsers.add_parser('health', help='–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã')

    # Info –∫–æ–º–∞–Ω–¥–∞
    subparsers.add_parser('info', help='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    try:
        if args.command == 'worker':
            queues = args.queues.split(',') if args.queues else None
            start_worker(
                queues=queues,
                concurrency=args.concurrency,
                loglevel=args.loglevel,
                max_tasks_per_child=args.max_tasks_per_child
            )

        elif args.command == 'beat':
            start_beat(loglevel=args.loglevel)

        elif args.command == 'status':
            status = get_worker_status()
            print(json.dumps(status, indent=2, ensure_ascii=False))

        elif args.command == 'submit':
            task_args = json.loads(args.args) if args.args else []
            task_kwargs = json.loads(args.kwargs) if args.kwargs else {}
            task_id = submit_task(args.task_name, task_args, task_kwargs)
            print(f"Task ID: {task_id}")

        elif args.command == 'task-status':
            status = get_task_status(args.task_id)
            print(json.dumps(status, indent=2, ensure_ascii=False, default=str))

        elif args.command == 'tasks':
            tasks = list_tasks(args.limit)
            print(json.dumps(tasks, indent=2, ensure_ascii=False, default=str))

        elif args.command == 'purge':
            purge_tasks(args.queue)

        elif args.command == 'health':
            show_system_health()

        elif args.command == 'info':
            info = get_worker_info()
            print(json.dumps(info, indent=2, ensure_ascii=False))

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
