#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö DiagMod
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
"""

import argparse
import asyncio
import sys
from pathlib import Path
from uuid import UUID

from src.data_processing.csv_loader import CSVLoader, load_csv_files_from_directory
from src.utils.logger import get_logger

logger = get_logger(__name__)


async def load_single_file(
    file_path: Path,
    equipment_id: str = None,
    sample_rate: int = 25600,
    batch_size: int = 10000
):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω CSV —Ñ–∞–π–ª"""
    try:
        equipment_uuid = UUID(equipment_id) if equipment_id else None

        loader = CSVLoader(batch_size=batch_size)

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: {file_path}")
        stats = await loader.load_csv_file(
            file_path=file_path,
            equipment_id=equipment_uuid,
            sample_rate=sample_rate
        )

        print(f"\n‚úì –§–∞–π–ª {file_path.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:")
        print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {stats.processed_rows:,}")
        print(f"  - –ü–∞—á–µ–∫: {stats.batches_processed}")
        print(f"  - –í—Ä–µ–º—è: {stats.processing_time:.1f} —Å–µ–∫")
        print(f"  - –°–∫–æ—Ä–æ—Å—Ç—å: {stats.rows_per_second:,.0f} —Å—Ç—Ä–æ–∫/—Å–µ–∫")
        print(f"  - NaN –∑–Ω–∞—á–µ–Ω–∏–π: R={stats.nan_values['R']:,}, S={stats.nan_values['S']:,}, T={stats.nan_values['T']:,}")

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path.name}: {e}")
        return False


async def load_directory(
    directory_path: Path,
    pattern: str = "*.csv",
    equipment_id: str = None,
    sample_rate: int = 25600
):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ CSV —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        equipment_uuid = UUID(equipment_id) if equipment_id else None

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
        results = await load_csv_files_from_directory(
            directory_path=directory_path,
            pattern=pattern,
            equipment_id=equipment_uuid,
            sample_rate=sample_rate
        )

        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"  - –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")

        successful = 0
        failed = 0
        total_rows = 0

        for filename, stats in results.items():
            if stats:
                successful += 1
                total_rows += stats.processed_rows
                print(f"  ‚úì {filename}: {stats.processed_rows:,} —Å—Ç—Ä–æ–∫")
            else:
                failed += 1
                print(f"  ‚úó {filename}: –û–®–ò–ë–ö–ê")

        print(f"\n–ò—Ç–æ–≥–æ:")
        print(f"  - –£—Å–ø–µ—à–Ω–æ: {successful} —Ñ–∞–π–ª–æ–≤")
        print(f"  - –û—à–∏–±–∫–∏: {failed} —Ñ–∞–π–ª–æ–≤")
        print(f"  - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_rows:,}")

        return failed == 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path}: {e}")
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–∫–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ DiagMod",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª
  python scripts/load_csv_data.py data/raw/motor_001.csv

  # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  python scripts/load_csv_data.py data/raw/motor_001.csv --equipment-id "550e8400-e29b-41d4-a716-446655440000"

  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  python scripts/load_csv_data.py data/raw/ --pattern "motor_*.csv"

  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
  python scripts/load_csv_data.py data/raw/motor_001.csv --sample-rate 50000 --batch-size 5000

  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
  python scripts/load_csv_data.py data/raw/motor_001.csv --dry-run
        """)

    parser.add_argument(
        "path",
        type=str,
        help="–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    )

    parser.add_argument(
        "--equipment-id",
        type=str,
        help="UUID –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)"
    )

    parser.add_argument(
        "--sample-rate",
        type=int,
        default=25600,
        help="–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤ –ì—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 25600)"
    )

    parser.add_argument(
        "--batch-size",
        type=int,
        default=10000,
        help="–†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10000)"
    )

    parser.add_argument(
        "--pattern",
        type=str,
        default="*.csv",
        help="–ü–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: *.csv)"
    )

    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î"
    )

    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        import logging
        logging.getLogger().setLevel(logging.DEBUG)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
    path = Path(args.path)
    if not path.exists():
        print(f"‚úó –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        sys.exit(1)

    if args.dry_run:
        print("üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î)")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print("–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    async def run_loader():
        success = False

        if path.is_file():
            success = await load_single_file(
                file_path=path,
                equipment_id=args.equipment_id,
                sample_rate=args.sample_rate,
                batch_size=args.batch_size
            )
        elif path.is_dir():
            success = await load_directory(
                directory_path=path,
                pattern=args.pattern,
                equipment_id=args.equipment_id,
                sample_rate=args.sample_rate
            )
        else:
            print(f"‚úó –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—É—Ç–∏: {path}")
            return False

        return success

    try:
        success = asyncio.run(run_loader())
        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n‚ö† –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
