"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Dashboard
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, List, Optional
from datetime import datetime, timedelta
import requests
import logging

logger = logging.getLogger(__name__)

class AdminPage:
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, data_manager, user_info: Dict):
        self.data_manager = data_manager
        self.user_info = user_info
        self.is_admin = user_info.get('role') == 'admin'

    def render(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.is_admin:
            st.error("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        st.title("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")

        # –í–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        tab1, tab2, tab3, tab4 = st.tabs([
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞",
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
        ])

        with tab1:
            self._render_users_management()

        with tab2:
            self._render_system_status()

        with tab3:
            self._render_statistics()

        with tab4:
            self._render_security_audit()

    def _render_users_management(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        st.subheader("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self._get_users_list()

        if users:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            col1, col2, col3, col4 = st.columns(4)

            total_users = len(users)
            active_users = len([u for u in users if u.get('is_active', False)])
            admin_users = len([u for u in users if u.get('role') == 'admin'])
            recent_logins = len([u for u in users if self._is_recent_login(u.get('last_login'))])

            with col1:
                st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
            with col2:
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_users)
            with col3:
                st.metric("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", admin_users)
            with col4:
                st.metric("–ù–µ–¥–∞–≤–Ω–∏–µ –≤—Ö–æ–¥—ã", recent_logins)

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            df_users = pd.DataFrame(users)
            st.dataframe(df_users, use_container_width=True)

            # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            st.subheader("–î–µ–π—Å—Ç–≤–∏—è")

            col1, col2 = st.columns(2)

            with col1:
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                    self._show_add_user_form()

            with col2:
                selected_user = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:",
                    options=[f"{u['username']} ({u['role']})" for u in users]
                )

                if selected_user and st.button("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"):
                    username = selected_user.split(' ')[0]
                    self._show_user_management(username)
        else:
            st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def _render_system_status(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        st.subheader("üñ•Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        services_status = self._check_services_status()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        for service, status in services_status.items():
            col1, col2, col3 = st.columns([2, 1, 1])

            with col1:
                st.write(f"**{service}**")

            with col2:
                if status['healthy']:
                    st.success("üü¢ –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    st.error("üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            with col3:
                if 'response_time' in status:
                    st.write(f"{status['response_time']:.2f}ms")

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.subheader("üìà –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

        metrics = self._get_system_metrics()
        if metrics:
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("CPU", f"{metrics.get('cpu_usage', 0):.1f}%")
            with col2:
                st.metric("RAM", f"{metrics.get('memory_usage', 0):.1f}%")
            with col3:
                st.metric("–î–∏—Å–∫", f"{metrics.get('disk_usage', 0):.1f}%")
            with col4:
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", metrics.get('active_connections', 0))

    def _render_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", value=datetime.now() - timedelta(days=7))
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞", value=datetime.now())

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self._get_usage_statistics(start_date, end_date)

        if stats:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤", stats.get('files_uploaded', 0))
            with col2:
                st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤", stats.get('signals_processed', 0))
            with col3:
                st.metric("–ù–∞–π–¥–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π", stats.get('anomalies_detected', 0))
            with col4:
                st.metric("API –∑–∞–ø—Ä–æ—Å–æ–≤", stats.get('api_requests', 0))

            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
            if 'daily_activity' in stats:
                fig = px.line(
                    x=[d['date'] for d in stats['daily_activity']],
                    y=[d['requests'] for d in stats['daily_activity']],
                    title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º"
                )
                st.plotly_chart(fig, use_container_width=True)

            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
            if 'anomaly_types' in stats:
                fig = px.pie(
                    values=list(stats['anomaly_types'].values()),
                    names=list(stats['anomaly_types'].keys()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π"
                )
                st.plotly_chart(fig, use_container_width=True)

    def _render_security_audit(self):
        """–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        st.subheader("üîê –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        # –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_events = self._get_security_events()

        if security_events:
            st.subheader("–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
            col1, col2, col3, col4 = st.columns(4)

            failed_logins = len([e for e in security_events if e.get('event_type') == 'failed_login'])
            successful_logins = len([e for e in security_events if e.get('event_type') == 'successful_login'])
            permission_denied = len([e for e in security_events if e.get('event_type') == 'permission_denied'])
            suspicious_activity = len([e for e in security_events if e.get('severity') == 'high'])

            with col1:
                st.metric("–ù–µ—É–¥–∞—á–Ω—ã–µ –≤—Ö–æ–¥—ã", failed_logins, delta=f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á")
            with col2:
                st.metric("–£—Å–ø–µ—à–Ω—ã–µ –≤—Ö–æ–¥—ã", successful_logins)
            with col3:
                st.metric("–û—Ç–∫–∞–∑—ã –¥–æ—Å—Ç—É–ø–∞", permission_denied)
            with col4:
                st.metric("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", suspicious_activity, delta_color="inverse")

            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
            df_events = pd.DataFrame(security_events)
            if not df_events.empty:
                st.dataframe(df_events, use_container_width=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        col1, col2 = st.columns(2)

        with col1:
            max_login_attempts = st.number_input("–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞", min_value=1, max_value=10, value=5)
            session_timeout = st.number_input("–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ (–º–∏–Ω)", min_value=15, max_value=480, value=60)

        with col2:
            require_2fa = st.checkbox("–¢—Ä–µ–±–æ–≤–∞—Ç—å 2FA", value=False)
            log_all_requests = st.checkbox("–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", value=True)

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            self._save_security_settings({
                'max_login_attempts': max_login_attempts,
                'session_timeout': session_timeout,
                'require_2fa': require_2fa,
                'log_all_requests': log_all_requests
            })
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    def _get_users_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            response = requests.get(
                f"{self.data_manager.API_BASE_URL}/admin/users",
                headers=self.data_manager.headers
            )
            if response.status_code == 200:
                return response.json()
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _is_recent_login(self, last_login: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
        if not last_login:
            return False

        try:
            login_date = datetime.fromisoformat(last_login.replace('Z', '+00:00'))
            return (datetime.now() - login_date).days <= 7
        except:
            return False

    def _check_services_status(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services = {
            'API': f"{self.data_manager.API_BASE_URL}/health",
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': f"{self.data_manager.API_BASE_URL}/health/db",
            'Redis': f"{self.data_manager.API_BASE_URL}/health/redis",
            'Worker': f"{self.data_manager.API_BASE_URL}/health/worker"
        }

        status = {}
        for service, url in services.items():
            try:
                start_time = datetime.now()
                response = requests.get(url, timeout=5)
                end_time = datetime.now()

                status[service] = {
                    'healthy': response.status_code == 200,
                    'response_time': (end_time - start_time).total_seconds() * 1000
                }
            except Exception:
                status[service] = {
                    'healthy': False,
                    'response_time': None
                }

        return status

    def _get_system_metrics(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            response = requests.get(
                f"{self.data_manager.API_BASE_URL}/admin/metrics",
                headers=self.data_manager.headers
            )
            if response.status_code == 200:
                return response.json()
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return None

    def _get_usage_statistics(self, start_date, end_date) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            response = requests.get(
                f"{self.data_manager.API_BASE_URL}/admin/statistics",
                headers=self.data_manager.headers,
                params={
                    'start_date': start_date.isoformat(),
                    'end_date': end_date.isoformat()
                }
            )
            if response.status_code == 200:
                return response.json()
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    def _get_security_events(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            response = requests.get(
                f"{self.data_manager.API_BASE_URL}/admin/security/events",
                headers=self.data_manager.headers
            )
            if response.status_code == 200:
                return response.json()
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return []

    def _save_security_settings(self, settings: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            response = requests.post(
                f"{self.data_manager.API_BASE_URL}/admin/security/settings",
                headers=self.data_manager.headers,
                json=settings
            )
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False

    def _show_add_user_form(self):
        """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with st.form("add_user_form"):
            st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            col1, col2 = st.columns(2)

            with col1:
                username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                email = st.text_input("Email")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

            with col2:
                role = st.selectbox("–†–æ–ª—å", ["operator", "engineer", "admin"])
                is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)
                department = st.text_input("–û—Ç–¥–µ–ª")

            submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            if submitted:
                if username and email and password:
                    user_data = {
                        'username': username,
                        'email': email,
                        'password': password,
                        'role': role,
                        'is_active': is_active,
                        'department': department
                    }

                    if self._create_user(user_data):
                        st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

    def _create_user(self, user_data: Dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(
                f"{self.data_manager.API_BASE_URL}/admin/users",
                headers=self.data_manager.headers,
                json=user_data
            )
            return response.status_code == 201
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
