# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Celery Worker (–º–µ—Ç—Ä–∏–∫–∏ + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
import time
import functools
from typing import Dict, Any, Callable
from celery import Celery
from celery.signals import (
    task_prerun, task_postrun, task_failure, task_success,
    worker_ready, worker_shutdown
)

from src.utils.metrics import (
    track_worker_task, worker_tasks_total, worker_task_duration_seconds,
    worker_active_tasks, increment_counter, observe_histogram, set_gauge
)
from src.utils.logger import get_logger, get_audit_logger

logger = get_logger(__name__)
audit_logger = get_audit_logger()


class WorkerMetricsCollector:
    # –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ Worker

    def __init__(self):
        self.active_tasks_count = 0
        self.task_start_times = {}
        self.setup_signal_handlers()

    def setup_signal_handlers(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ Celery

        @task_prerun.connect
        def task_prerun_handler(sender=None, task_id=None, task=None, args=None, kwargs=None, **kwargs_extra):
            # –ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏
            self.on_task_prerun(task_id, task.__name__, args, kwargs)

        @task_postrun.connect
        def task_postrun_handler(sender=None, task_id=None, task=None, args=None, kwargs=None,
                               retval=None, state=None, **kwargs_extra):
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            self.on_task_postrun(task_id, task.__name__, state, retval)

        @task_failure.connect
        def task_failure_handler(sender=None, task_id=None, exception=None, traceback=None, einfo=None, **kwargs):
            # –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏
            self.on_task_failure(task_id, sender.__name__, exception, traceback)

        @task_success.connect
        def task_success_handler(sender=None, result=None, **kwargs):
            # –£—Å–ø–µ—Ö –∑–∞–¥–∞—á–∏
            self.on_task_success(sender.__name__, result)

        @worker_ready.connect
        def worker_ready_handler(sender=None, **kwargs):
            # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–æ—Ä–∫–µ—Ä–∞
            self.on_worker_ready(sender)

        @worker_shutdown.connect
        def worker_shutdown_handler(sender=None, **kwargs):
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
            self.on_worker_shutdown(sender)

    def on_task_prerun(self, task_id: str, task_name: str, args: tuple, kwargs: dict):
        # –ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏
        self.active_tasks_count += 1
        self.task_start_times[task_id] = time.time()

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        set_gauge('worker_active_tasks', self.active_tasks_count)

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏
        logger.info(
            f"üîÑ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_name}",
            extra={
                'event_type': 'task_start',
                'task_id': task_id,
                'task_name': task_name,
                'args_count': len(args),
                'kwargs_count': len(kwargs)
            }
        )

    def on_task_postrun(self, task_id: str, task_name: str, state: str, result: Any):
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        self.active_tasks_count = max(0, self.active_tasks_count - 1)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = self.task_start_times.pop(task_id, None)
        duration = time.time() - start_time if start_time else 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        set_gauge('worker_active_tasks', self.active_tasks_count)

        increment_counter(
            'worker_tasks_total',
            {'task_name': task_name, 'status': state or 'unknown'}
        )

        observe_histogram(
            'worker_task_duration_seconds',
            duration,
            {'task_name': task_name}
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        logger.info(
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_name}",
            extra={
                'event_type': 'task_complete',
                'task_id': task_id,
                'task_name': task_name,
                'state': state,
                'duration_seconds': duration,
                'result_type': type(result).__name__ if result else 'None'
            }
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if duration > 60:  # –ó–∞–¥–∞—á–∏ –¥–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
            logger.warning(
                f"üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_name} –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {duration:.2f}s",
                extra={
                    'event_type': 'slow_task',
                    'task_id': task_id,
                    'task_name': task_name,
                    'duration_seconds': duration
                }
            )

    def on_task_failure(self, task_id: str, task_name: str, exception: Exception, traceback: str):
        # –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏
        self.active_tasks_count = max(0, self.active_tasks_count - 1)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ –æ—à–∏–±–∫–∏
        start_time = self.task_start_times.pop(task_id, None)
        duration = time.time() - start_time if start_time else 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        set_gauge('worker_active_tasks', self.active_tasks_count)

        increment_counter(
            'worker_tasks_total',
            {'task_name': task_name, 'status': 'failure'}
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_name}: {exception}",
            extra={
                'event_type': 'task_error',
                'task_id': task_id,
                'task_name': task_name,
                'error_type': type(exception).__name__,
                'error_message': str(exception),
                'duration_seconds': duration
            },
            exc_info=True
        )

    def on_task_success(self, task_name: str, result: Any):
        # –£—Å–ø–µ—Ö –∑–∞–¥–∞—á–∏
        logger.debug(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_name}",
            extra={
                'event_type': 'task_success',
                'task_name': task_name,
                'result_type': type(result).__name__ if result else 'None'
            }
        )

    def on_worker_ready(self, sender):
        # –í–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤
        worker_hostname = getattr(sender, 'hostname', 'unknown')
        logger.info(
            f"üü¢ Worker {worker_hostname} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            extra={
                'event_type': 'worker_ready',
                'worker_hostname': worker_hostname
            }
        )

    def on_worker_shutdown(self, sender):
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
        worker_hostname = getattr(sender, 'hostname', 'unknown')
        logger.info(
            f"üî¥ Worker {worker_hostname} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É",
            extra={
                'event_type': 'worker_shutdown',
                'worker_hostname': worker_hostname
            }
        )


def track_task_metrics(task_name: str = None):
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∑–∞–¥–∞—á
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.time()
            task_name_resolved = task_name or func.__name__
            status = 'success'

            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                logger.info(
                    f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_name_resolved}",
                    extra={
                        'event_type': 'task_execution',
                        'task_name': task_name_resolved,
                        'args_count': len(args),
                        'kwargs_count': len(kwargs)
                    }
                )

                result = func(*args, **kwargs)
                return result

            except Exception as e:
                status = 'error'
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_name_resolved}: {e}",
                    extra={
                        'event_type': 'task_error',
                        'task_name': task_name_resolved,
                        'error_type': type(e).__name__,
                        'error_message': str(e)
                    },
                    exc_info=True
                )
                raise

            finally:
                duration = time.time() - start_time

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                increment_counter(
                    'worker_tasks_total',
                    {'task_name': task_name_resolved, 'status': status}
                )

                observe_histogram(
                    'worker_task_duration_seconds',
                    duration,
                    {'task_name': task_name_resolved}
                )

                logger.info(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ {task_name_resolved} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f}s",
                    extra={
                        'event_type': 'task_completed',
                        'task_name': task_name_resolved,
                        'duration_seconds': duration,
                        'status': status
                    }
                )

        return wrapper
    return decorator


def setup_worker_monitoring(celery_app: Celery):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫
    metrics_collector = WorkerMetricsCollector()

    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    @celery_app.task(bind=True)
    def monitored_task(self, original_task, *args, **kwargs):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
        with track_task_metrics(original_task.__name__):
            return original_task(*args, **kwargs)

    logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Worker –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return metrics_collector


# –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ Worker
def create_worker_metrics_server(port: int = 8002):
    # HTTP —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ Worker
    from prometheus_client import start_http_server, generate_latest
    from src.utils.metrics import get_all_metrics

    try:
        start_http_server(port)
        logger.info(f"üìä HTTP —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ Worker –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        logger.info(f"üîó –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}/metrics")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")


def get_worker_metrics_endpoint():
    # Flask endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫
    from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
    from flask import Flask, Response

    app = Flask(__name__)

    @app.route('/metrics')
    def metrics():
    # Prometheus –º–µ—Ç—Ä–∏–∫–∏
        try:
            metrics_data = generate_latest()
            return Response(metrics_data, mimetype=CONTENT_TYPE_LATEST)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ Worker: {e}")
            return Response("Error getting metrics", status=500)

    @app.route('/health')
    def health():
        # Health check
        return {
            "status": "healthy",
            "timestamp": time.time(),
            "service": "diagmod-worker"
        }

    return app


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
worker_metrics_collector = None

def get_worker_metrics_collector() -> WorkerMetricsCollector:
    # –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
    global worker_metrics_collector
    if worker_metrics_collector is None:
        worker_metrics_collector = WorkerMetricsCollector()
    return worker_metrics_collector
