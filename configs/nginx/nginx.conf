user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=dashboard:10m rate=5r/s;

    # Upstream servers
    upstream api_backend {
        least_conn;
        server api:8000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream dashboard_backend {
        least_conn;
        server dashboard:8501 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    upstream prometheus_backend {
        server prometheus:9090;
    }

    upstream grafana_backend {
        server grafana:3000;
    }

    # API Server
    server {
        listen 80;
        server_name api.diagmod.local localhost;

        location / {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Health check
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        location /health {
            access_log off;
            proxy_pass http://api_backend/health;
        }

        location /metrics {
            proxy_pass http://api:8001/metrics;
            allow 127.0.0.1;
            allow 172.0.0.0/8;
            deny all;
        }
    }

    # Dashboard Server
    server {
        listen 80;
        server_name dashboard.diagmod.local;

        location / {
            limit_req zone=dashboard burst=10 nodelay;

            proxy_pass http://dashboard_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Streamlit specific
            proxy_buffering off;
            proxy_read_timeout 86400;
        }

        location /healthz {
            access_log off;
            proxy_pass http://dashboard_backend/healthz;
        }

        location /_stcore/stream {
            proxy_pass http://dashboard_backend/_stcore/stream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }
    }

    # Monitoring - Prometheus
    server {
        listen 80;
        server_name prometheus.diagmod.local;

        location / {
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Basic auth (в продакшене следует настроить)
            # auth_basic "Prometheus";
            # auth_basic_user_file /etc/nginx/.htpasswd;
        }
    }

    # Monitoring - Grafana
    server {
        listen 80;
        server_name grafana.diagmod.local;

        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support for live updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }
    }

    # Default server (catch-all)
    server {
        listen 80 default_server;
        server_name _;

        location / {
            return 301 http://dashboard.diagmod.local$request_uri;
        }
    }

    # SSL Configuration (для продакшена)
    # server {
    #     listen 443 ssl http2;
    #     server_name api.diagmod.local;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    #     ssl_prefer_server_ciphers off;
    #
    #     location / {
    #         proxy_pass http://api_backend;
    #         # ... остальные настройки proxy
    #     }
    # }
}
