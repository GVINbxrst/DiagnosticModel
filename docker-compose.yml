version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: diagmod_postgres
    environment:
      POSTGRES_DB: diagmod
      POSTGRES_USER: diagmod_user
      POSTGRES_PASSWORD: diagmod_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/schema:/docker-entrypoint-initdb.d/01-schema:ro
      - ./sql/views:/docker-entrypoint-initdb.d/02-views:ro
      - ./sql/procedures:/docker-entrypoint-initdb.d/03-procedures:ro
      - ./sql/seed:/docker-entrypoint-initdb.d/04-seed:ro
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diagmod_user -d diagmod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis для Celery и кеширования
  redis:
    image: redis:7-alpine
    container_name: diagmod_redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --timeout 300
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # FastAPI приложение
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: production
    container_name: diagmod_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://diagmod_user:diagmod_password@postgres:5432/diagmod
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=8001
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - api_cache:/app/.cache
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      target: production
    container_name: diagmod_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://diagmod_user:diagmod_password@postgres:5432/diagmod
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - CELERY_WORKER_CONCURRENCY=4
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - worker_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "celery", "-A", "src.worker.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
      target: production
    container_name: diagmod_dashboard
    environment:
      - API_URL=http://api:8000
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8501
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      - ./logs:/app/logs
      - dashboard_cache:/app/.streamlit
    ports:
      - "8501:8501"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: diagmod_nginx
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - dashboard
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: diagmod_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: diagmod_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - diagmod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Node Exporter для системных метрик
  node-exporter:
    image: prom/node-exporter:latest
    container_name: diagmod_node_exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    networks:
      - diagmod_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: diagmod_backup
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=diagmod_user
      - PGPASSWORD=diagmod_password
      - PGDATABASE=diagmod
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - diagmod_network
    restart: "no"
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker_volumes/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker_volumes/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker_volumes/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker_volumes/grafana
  api_cache:
  worker_cache:
  dashboard_cache:
  nginx_cache:
  nginx_logs:

networks:
  diagmod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
